- hosts: all
  become: true

  vars_files:
    - vars.yml

  pre_tasks:
    - name: Ensure Python and Git are installed
      apt:
        name:
          - libpq-dev
          - python3
          - python3-pip
          - python3-venv
          - git
          - postgresql
          - postgresql-contrib
        state: latest

    - name: "Install Python packages"
      pip: "name={{ item }}  state=present"
      with_items:
        - psycopg2-binary

    - name: Clone bot repository
      git:
        repo: 'https://github.com/Vadim1551/telegram-bot.git'
        dest: '/tg_project'
        version: master
        clone: yes
        update: yes

  tasks:
    - name: Copy init.sh script to remote host
      copy:
        src: init.sh
        dest: /tg_project/bot/init.sh
        mode: 0755  # Set execute permission on the script

    - name: Копируем файл .env в папку /tg_project/bot
      copy:
        src: .env
        dest: /tg_project/bot/.env
        mode: 0755               # Права файла (по умолчанию Ansible использует 0644, если не указать mode)

    - name: Create directory and set ownership
      ansible.builtin.shell: |
        mkdir -p /oracle/pg_data/archive
        chown -R postgres:postgres /oracle

    - name: Update PostgreSQL configuration
      community.general.postgresql_set:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
      loop:
        - { name: "listen_addresses", value: "*" }
        - { name: "archive_mode", value: "on" }
        - { name: "archive_command", value: "cp %p /oracle/pg_data/archive/%f" }
        - { name: "max_wal_senders", value: "10" }
        - { name: "wal_level", value: "replica" }
        - { name: "wal_log_hints", value: "on" }
        - { name: "log_replication_commands", value: "on" }
      become: true
      become_user: postgres

    - name: Ensure replication entry in pg_hba.conf
      community.postgresql.postgresql_pg_hba:
        dest: "/etc/postgresql/16/main/pg_hba.conf"
        contype: host
        databases: replication
        users: repl_user
        address: '{{ repl_db_host }}/32'
        method: md5
        state: present
      become: true
      become_user: postgres

    - name: Ensure loacl connection md5 entry in pg_hba.conf
      community.postgresql.postgresql_pg_hba:
        dest: "/etc/postgresql/16/main/pg_hba.conf"
        contype: local
        databases: all
        users: all
        method: trust
        state: present
      become: true
      become_user: postgres

    - name: Ensure PostgreSQL is restarted to apply all changes
      ansible.builtin.systemd:
        name: postgresql
        state: restarted
        enabled: yes

    - name: Wait for PostgreSQL to fully restart
      ansible.builtin.wait_for:
        port: 5432
        timeout: 300
        state: started
        delay: 3

    - name: Run a simple Bash command
      ansible.builtin.command: chmod +x /tg_project/bot/init.sh
      become: yes

    - name: Create a virtual environment
      ansible.builtin.command: python3 -m venv /tg_project/venv
      args:
        creates: /tg_project/venv

    - name: Install requirements
      ansible.builtin.pip:
        requirements: /tg_project/bot/requirements.txt
        virtualenv: /tg_project/venv
      register: pip_install_result
      async: 300
      poll: 0

    - name: Wait for requirements installation to finish
      ansible.builtin.async_status:
        jid: "{{ pip_install_result.ansible_job_id }}"
      register: job_result_pip
      until: job_result_pip.finished
      retries: 30
      delay: 5

    - name: Run a simple Bash command
      ansible.builtin.command: chmod +x /tg_project/bot/main.py
      become: yes

    - name: Run init.sh script on remote host
      command: sudo bash ./init.sh
      args:
        chdir: /tg_project/bot/
      become_user: ansible

    - name: Run the bot script
      ansible.builtin.command: /tg_project/venv/bin/python3 /tg_project/bot/main.py
      async: 999999999999
      poll: 0
      become: yes

