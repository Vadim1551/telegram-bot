- hosts: all
  become: true

  vars_files:
    - vars.yml

  pre_tasks:
    - name: Ensure Python and Git are installed
      apt:
        name:
          - libpq-dev
          - python3
          - python3-pip
          - python3-venv
          - git
        state: latest

    - name: "Install packages"
      dnf: "name={{ item }} state=present"
      with_items:
        - postgresql
        - postgresql-contrib

    - name: "Install Python packages"
      pip: "name={{ item }}  state=present"
      with_items:
        - psycopg2-binary

  tasks:
    - name: "Find out if PostgreSQL is initialized"
      ansible.builtin.stat:
        path: "/var/lib/pgsql/data/pg_hba.conf"
      register: postgres_data

    - name: "Initialize PostgreSQL"
      shell: "postgresql-setup initdb"
      when: not postgres_data.stat.exists

    - name: "Start and enable services"
      service: "name={{ item }} state=started enabled=yes"
      with_items:
        - postgresql

    - name: "Create app database"
      postgresql_db:
        state: present
        name: "{{ db_name }}"
      become: true
      become_user: postgres

    - name: "Create db user"
      postgresql_user:
        state: present
        name: "{{ db_user }}"
        password: "{{ db_password }}"
      become: true
      become_user: postgres

    - name: "Grant db user access to app db"
      postgresql_privs:
        type: database
        database: "{{ db_name }}"
        roles: "{{ db_user }}"
        grant_option: no
        privs: all
      become: true
      become_user: postgres

    - name: "Create repl_user"
      postgresql_user:
        state: present
        name: "{{ repl_user }}"
        password: "{{ repl_password }}"
      become: true
      become_user: postgres

    - name: Create directory and set ownership
      ansible.builtin.shell: |
        mkdir -p /oracle/pg_data/archive
        chown -R postgres:postgres /oracle

    - name: Update PostgreSQL configuration
      community.general.postgresql_set:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
      loop:
        - { name: "listen_addresses", value: "'*'" }
        - { name: "archive_mode", value: "on" }
        - { name: "archive_command", value: "'cp %p /oracle/pg_data/archive/%f'" }
        - { name: "max_wal_senders", value: "10" }
        - { name: "wal_level", value: "replica" }
        - { name: "wal_log_hints", value: "on" }
        - { name: "log_replication_commands", value: "on" }
      become: yes
      become_user: postgres

    - name: Ensure replication entry in pg_hba.conf
      community.postgresql.postgresql_pg_hba:
        dest: "{{ /etc/postgresql/14/main/pg_hba.conf }}"
        contype: host
        databases: replication
        users: repl_user
        addresses: ['{{ repl_db_host }}/24']
        method: scram-sha-256
        state: present
      become: true
      become_user: postgres

    - name: Ensure PostgreSQL is restarted to apply all changes
      ansible.builtin.systemd:
        name: postgresql
        state: restarted
        enabled: yes

    - name: Stop PostgreSQL service
      ansible.builtin.systemd:
        name: postgresql
        state: stopped

    - name: Run pg_basebackup with environment variables
      ansible.builtin.shell: |
        PGPASSWORD="{{ repl_password }}" pg_basebackup -R -h "{{ repl_host }}" -U "{{ repl_user }}" -D /var/lib/postgresql/14/main -P
      environment:
        PGPASSWORD: "{{ repl_password }}"
      register: backup_result
      changed_when: "'base backup successful' in backup_result.stdout"

    - name: Start PostgreSQL service
      ansible.builtin.systemd:
        name: postgresql
        state: started

  handlers:
    - name: restart postgres
      service: name=postgresql state=restarted
