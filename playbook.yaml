- hosts: all
  become: true

  vars_files:
    - vars.yml

  pre_tasks:
    - name: Ensure Python and Git are installed
      apt:
        name:
          - libpq-dev
          - python3
          - python3-pip
          - python3-venv
          - git
          - postgresql
          - postgresql-contrib
        state: latest

    - name: "Install Python packages"
      pip: "name={{ item }}  state=present"
      with_items:
        - psycopg2-binary

    - name: Clone bot repository
      git:
        repo: 'https://github.com/Vadim1551/telegram-bot.git'
        dest: '/tg_project'
        version: master
        clone: yes
        update: yes

  tasks:
    - name: "Find out if PostgreSQL is initialized"
      ansible.builtin.stat:
        path: "/var/lib/pgsql/data/pg_hba.conf"
      register: postgres_data

    - name: Drop specified users if they exist
      become: true
      become_user: postgres
      postgresql_db:
        name: "db_bot"
        state: absent
      become_user: postgres

    - name: Drop specified users if they exist
      become: true
      become_user: postgres
      postgresql_user:
        name: "repl_user"
        state: absent
      become_user: postgres

    - name: "Create app database"
      postgresql_db:
        state: present
        name: "{{ db_name }}"
      become_user: postgres

    - name: Create my user
      postgresql_user:
        name: "{{ db_user }}"
        password: "{{ db_password }}"
        encrypted: yes
      become_user: postgres

    - name: Execute SQL script using postgres user
      postgresql_query:
        db: "{{ db_name }}"
        session_role: "postgres"
        path_to_script: /tg_project/main_db/init.sql
      become_user: postgres

    - name: Grant ALL PRIVILEGES on database "{{ db_name }}"  to "{{ db_user }}"
      community.postgresql.postgresql_privs:
        db: "{{ db_name }}"
        state: present
        privs: ALL
        objs: ALL_IN_SCHEMA
        role: "{{ db_user }}"
      become_user: postgres

    - name: Grant usage and select privileges on all sequences in public schema to www
      community.postgresql.postgresql_privs:
        db: "{{ db_name }}"
        privs: ALL
        type: table
        objs: emails,phones
        schema: public
        role: "{{db_user}}"
        state: present
        grant_option: true
      become_user: postgres

    - name: Create directory and set ownership
      ansible.builtin.shell: |
        mkdir -p /oracle/pg_data/archive
        chown -R postgres:postgres /oracle

    - name: Update PostgreSQL configuration
      community.general.postgresql_set:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
      loop:
        - { name: "listen_addresses", value: "*" }
        - { name: "archive_mode", value: "on" }
        - { name: "archive_command", value: "cp %p /oracle/pg_data/archive/%f" }
        - { name: "max_wal_senders", value: "10" }
        - { name: "wal_level", value: "replica" }
        - { name: "wal_log_hints", value: "on" }
        - { name: "log_replication_commands", value: "on" }
      become: true
      become_user: postgres

    - name: Ensure replication entry in pg_hba.conf
      community.postgresql.postgresql_pg_hba:
        dest: "/etc/postgresql/16/main/pg_hba.conf"
        contype: host
        databases: replication
        users: repl_user
        address: '{{ repl_db_host }}/24'
        method: scram-sha-256
        state: present
      become: true
      become_user: postgres

    - name: Ensure loacl connection md5 entry in pg_hba.conf
      community.postgresql.postgresql_pg_hba:
        dest: "/etc/postgresql/16/main/pg_hba.conf"
        contype: local
        databases: all
        users: all
        method: md5
        state: present
      become: true
      become_user: postgres

    - name: Ensure loacl connection postgres md5 entry in pg_hba.conf
      community.postgresql.postgresql_pg_hba:
        dest: "/etc/postgresql/16/main/pg_hba.conf"
        contype: local
        databases: all
        users: postgres
        method: trust
        state: present
      become: true
      become_user: postgres

    - name: Ensure PostgreSQL is restarted to apply all changes
      ansible.builtin.systemd:
        name: postgresql
        state: restarted
        enabled: yes

    - name: Create a virtual environment
      ansible.builtin.command: python3 -m venv /tg_project/venv
      args:
        creates: /tg_project/venv

    - name: Install requirements
      ansible.builtin.pip:
        requirements: /tg_project/bot/requirements.txt
        virtualenv: /tg_project/venv

    - name: Копируем файл .env в папку /bot
      copy:
        src: .env
        dest: /tg_project/bot/.env
        owner: ansible            # Вы можете указать владельца файла
        group: ansible           # Группу файла
        mode: '0755'               # Права файла (по умолчанию Ansible использует 0644, если не указать mode)
      become: yes

    - name: Run a simple Bash command
      shell: |
        chmod +x /tg_project/bot/main.py
      become: yes

    - name: Run the bot script
      ansible.builtin.command: /tg_project/venv/bin/python3 /tg_project/bot/main.py
      async: 999999999999
      poll: 0
      become: yes

