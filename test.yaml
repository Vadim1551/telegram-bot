---
- hosts: host01
  become: yes
  vars_files:
    - vars.yml

  handlers:
    - name: restart postgresql
      ansible.builtin.systemd:
        name: postgresql
        state: restarted

  vars_files:
    - vars.yml
  tasks:
    - name: Install apt packages
      apt:
        name:
          - libpq-dev
          - python3
          - python3-pip
          - python3-venv
          - git
          - postgresql
          - postgresql-contrib
        state: latest

    - name: Install Python packages
      pip: "name={{ item }}  state=present"
      with_items:
        - psycopg2-binary

    - name: Clone git docker branch repository
      git:
        repo: 'https://github.com/Vadim1551/telegram-bot.git'
        dest: '/tg_project'
        version: docker
        clone: yes
        update: yes

    - name: Set options
      community.postgresql.postgresql_set:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
      become: true
      become_user: postgres
      with_items:
        - { name: "listen_addresses", value: "*" }
        - { name: "archive_mode", value: "on" }
        - { name: "archive_command", value: "cp %p /oracle/pg_data/archive/%f" }
        - { name: "max_wal_senders", value: "10" }
        - { name: "wal_level", value: "replica" }
        - { name: "wal_log_hints", value: "on" }
        - { name: "log_replication_commands", value: "on" }
      notify:
        - restart postgresql

    - name: "Create app database"
      postgresql_db:
        state: present
        name: "{{ DB_NAME }}"
      become: yes
      become_user: postgres

    - name: "Create db user"
      postgresql_user:
        state: present
        name: "{{ DB_USER }}"
        password: "{{ DB_PASSWORD }}"
      become: yes
      become_user: postgres


    - name: Select query to db acme with positional arguments and non-default credentials
      community.postgresql.postgresql_query:
        db: "{{ DB_NAME }}"
        query: DROP ROLE IF EXISTS {{ REPL_DB_USER }}
      become: yes
      become_user: postgres

    - name: Select query to db acme with positional arguments and non-default credentials
      community.postgresql.postgresql_query:
        db: postgres
        query: CREATE ROLE {{ REPL_DB_USER }} WITH REPLICATION PASSWORD '{{ REPL_DB_PASSWORD }}' LOGIN
      become: yes
      become_user: postgres

    - name: Add entries to pg_hba
      community.postgresql.postgresql_pg_hba:
        dest: "/etc/postgresql/16/main/pg_hba.conf"
        address: "{{ item.address | default(omit) }}"
        contype: "{{ item.contype }}"
        databases: "{{ item.databases }}"
        method: "{{ item.method }}"
        users: "{{ item.users }}"
      become: true
      become_user: postgres
      with_items:
        - { contype: local, databases: all, users: all, method: trust }
        - { contype: host,  databases: all, users: "{{ DB_USER }}", method: md5 }
        - { contype: host,  databases: replication, users: "{{ REPL_DB_USER }}",   address: "{{ REPL_DB_HOST}}/24", method: scram-sha-256 }
      notify:
        - restart postgresql

    - name: Create directory and set ownership
      ansible.builtin.shell: |
        mkdir -p /oracle/pg_data/archive
        chown -R postgres:postgres /oracle

    - name: Create table emails
      community.postgresql.postgresql_table:
        db: "{{ DB_NAME }}"
        table: emails
        columns:
        - ID SERIAL PRIMARY KEY
        - email VARCHAR(255) NOT NULL UNIQUE
      become: true
      become_user: postgres

    - name: Create table phones
      community.postgresql.postgresql_table:
        db: "{{ DB_NAME }}"
        table: phones
        columns:
        - ID SERIAL PRIMARY KEY
        - phone VARCHAR(20) NOT NULL UNIQUE

      become: true
      become_user: postgres

    - name: Select query to db acme with positional arguments and non-default credentials
      community.postgresql.postgresql_query:
        db: "{{ DB_NAME }}"
        query:
        - GRANT ALL PRIVILEGES ON DATABASE {{ DB_NAME }} TO {{ DB_USER }}
        - GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO {{ DB_USER }}
        - GRANT ALL PRIVILEGES ON emails, phones TO {{ DB_USER }}
      become: yes
      become_user: postgres

    - name: Create a virtual environment
      ansible.builtin.command: python3 -m venv /tg_project/venv
      args:
        creates: /tg_project/venv

    - name: Install requirements
      ansible.builtin.pip:
        requirements: /tg_project/bot/requirements.txt
        virtualenv: /tg_project/venv
      register: pip_install_result
      async: 300
      poll: 0

    - name: Wait for requirements installation to finish
      ansible.builtin.async_status:
        jid: "{{ pip_install_result.ansible_job_id }}"
      register: job_result_pip
      until: job_result_pip.finished
      retries: 30
      delay: 5

- hosts: host02
  become: yes
  vars_files:
    - vars.yml

  handlers:
    - name: restart postgresql
      ansible.builtin.systemd:
        name: postgresql
        state: restarted

  tasks:
    - name: Install apt packages
      apt:
        name:
          - libpq-dev
          - libpq-dev
          - python3
          - python3-pip
          - python3-venv
          - git
          - postgresql
          - postgresql-contrib
        state: latest

    - name: Install Python packages
      pip: "name={{ item }}  state=present"
      with_items:
        - psycopg2-binary

    - name: Set options
      community.postgresql.postgresql_set:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
      with_items:
        - { name: "listen_addresses", value: "localhost,{{ DB_HOST }}" }
      notify:
        - restart postgresql
      become: true
      become_user: postgres

    - name: Ensure PostgreSQL is restarted to apply all changes
      ansible.builtin.systemd:
        name: postgresql
        state: stopped

    - name: Remove PostgreSQL data dir
      ansible.builtin.shell: "rm -rf /var/lib/postgresql/16/main/*"
      become_user: postgres  # Выполнять команду от имени пользователя postgres

    - name: Get data pg_basebackup
      ansible.builtin.shell: "pg_basebackup -R -h {{ DB_HOST }} -U {{ REPL_DB_USER }} -D /var/lib/postgresql/16/main -P"
      become_user: postgres
      environment:
        PGPASSWORD: "{{ REPL_DB_PASSWORD }}"

- hosts: host01
  become: yes
  tasks:
    - name: Run the bot script
      ansible.builtin.command: /tg_project/venv/bin/python3 /tg_project/bot/main.py
      become: yes
